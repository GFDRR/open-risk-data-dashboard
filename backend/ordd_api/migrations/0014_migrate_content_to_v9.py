# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-08-11 11:50
from __future__ import unicode_literals

from django.db import migrations, models


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    KeyDataset = apps.get_model("ordd_api", "KeyDataset")
    KeyCategory = apps.get_model("ordd_api", "KeyCategory")
    KeyDatasetName = apps.get_model("ordd_api", "KeyDatasetName")
    KeyTagGroup = apps.get_model("ordd_api", "KeyTagGroup")
    KeyTag = apps.get_model("ordd_api", "KeyTag")
    KeyLevel = apps.get_model("ordd_api", "KeyLevel")

    db_alias = schema_editor.connection.alias

    klevel_loc = KeyLevel.objects.using(db_alias).get(name='Local')
    klevel_nat = KeyLevel.objects.using(db_alias).get(name='National')
    klevel_int = KeyLevel.objects.using(db_alias).get(name='International')

    ktaggrp_ha = KeyTagGroup.objects.using(db_alias).get(name='hazard')

    kcat_ba = KeyCategory.objects.using(db_alias).get(code='BA')
    kcat_ha = KeyCategory.objects.using(db_alias).get(code='HA')
    kcat_ri = KeyCategory.objects.using(db_alias).get(code='RI')
    kcat_ex = KeyCategory.objects.using(db_alias).get(code='EX')

    # NEW TIME REFERENCE TAG GROUP
    ktaggrp_timeref = KeyTagGroup.objects.using(db_alias).create(
        name='time reference')

    KeyTag.objects.using(db_alias).create(
        name='Present', group=ktaggrp_timeref, is_peril=False)

    KeyTag.objects.using(db_alias).create(
        name='Future projection', group=ktaggrp_timeref,
        is_peril=False)

    # NEW BA_5
    kdname = KeyDatasetName.objects.using(db_alias).get(name='Bathymetry')
    kd = KeyDataset.objects.using(db_alias).create(
        code='BA_5', category=kcat_ba, dataset=kdname,
        tag_available=ktaggrp_ha,
        description="Bathymetry map describing the terrain that lies"
        " underwater, or the depth of water relative to sea level, with"
        " a resolution of at least 10 meters.",
        level=klevel_nat, format="raster (.tif)", comment="", weight=10)

    kd.applicability.add(KeyTag.objects.using(db_alias).get(name='Coastal '
                                                            'flooding'),
                         KeyTag.objects.using(db_alias).get(name='Tsunami'))

    # NEW BA_6
    kd = KeyDataset.objects.using(db_alias).create(
        code='BA_6', category=kcat_ba, dataset=kdname,
        tag_available=ktaggrp_ha,
        description="Bathymetry map describing the terrain that lies"
        " underwater, or the depth of water relative to sea level, with"
        " a resolution of 100 meters or higher.",
        level=klevel_nat, format="raster (.tif)", comment="", weight=10)

    kd.applicability.add(KeyTag.objects.using(db_alias).get(name='Coastal '
                                                            'flooding'),
                         KeyTag.objects.using(db_alias).get(name='Tsunami'))

    # NEW HA_23A
    kdname_scen = KeyDatasetName.objects.using(db_alias).create(
        name="Hazard scenarios")

    kd = KeyDataset.objects.using(db_alias).create(
        code='HA_23A', category=kcat_ha, dataset=kdname_scen,
        tag_available=ktaggrp_ha,
        description="Historical records of significant natural hazard"
        " events in the country including the type, intensity, footprint,"
        " description and date of the hazard events. Historical records"
        " may refer to only one or more hazard types. Data may also contain"
        " non observed but plausible scenarios of hazard events.",
        level=klevel_nat, comment="", weight=10)

    # NEW HA_23B
    kdname_rec = KeyDatasetName.objects.using(db_alias).get(
        name="Historical records")

    kd = KeyDataset.objects.using(db_alias).create(
        code='HA_23B', category=kcat_ha, dataset=kdname_rec,
        tag_available=ktaggrp_ha,
        description="Historical records of all natural hazard events in the"
        " country including at least the type, intensity, description, date"
        " and location of the hazard events. Historical records may refer"
        " to only one or more hazard types.",
        level=klevel_loc, comment="", weight=10)

    # NEW RI_2
    kdname = KeyDatasetName.objects.using(db_alias).get(
        name="records of previous natural disasters")

    kd = KeyDataset.objects.using(db_alias).create(
        code='RI_2', category=kcat_ri, dataset=kdname,
        tag_available=ktaggrp_ha,
        description="Information about affected exposure during"
        " previous hazard.",
        level=klevel_nat, comment="", weight=10)

    # NEW EX_3D
    kdname = KeyDatasetName.objects.using(db_alias).create(
        name='Company register')

    kd = KeyDataset.objects.using(db_alias).create(
        code='EX_3D', category=kcat_ex, dataset=kdname,
        tag_available=ktaggrp_timeref,
        description="List of registered companies for the country"
        " including their addresses and economic sector.",
        level=klevel_nat, comment="", weight=10)

    kd.applicability.add(*list(KeyTag.objects.using(
        db_alias).filter(is_peril=True)))


def backwards_func(apps, schema_editor):
    KeyDatasetName = apps.get_model("ordd_api", "KeyDatasetName")
    KeyDataset = apps.get_model("ordd_api", "KeyDataset")
    KeyTagGroup = apps.get_model("ordd_api", "KeyTagGroup")
    KeyTag = apps.get_model("ordd_api", "KeyTag")

    db_alias = schema_editor.connection.alias

    kd = KeyDataset.objects.using(db_alias).get(code='EX_3D')
    kd.delete()

    kdname = KeyDatasetName.objects.using(db_alias).get(
        name='Company register')
    kdname.delete()

    kd = KeyDataset.objects.using(db_alias).get(code='RI_2')
    kd.delete()

    kd = KeyDataset.objects.using(db_alias).get(code='HA_23B')
    kd.delete()

    kd = KeyDataset.objects.using(db_alias).get(code='HA_23A')
    kd.delete()

    kdname_scen = KeyDatasetName.objects.using(db_alias).get(
        name="Hazard scenarios")
    kdname_scen.delete()

    kd = KeyDataset.objects.using(db_alias).get(code='BA_6')
    kd.delete()

    kd = KeyDataset.objects.using(db_alias).get(code='BA_5')
    kd.delete()

    ktag = KeyTag.objects.using(db_alias).get(name='Future projection')
    ktag.delete()

    ktag = KeyTag.objects.using(db_alias).get(name='Present')
    ktag.delete()

    ktaggrp_timeref = KeyTagGroup.objects.using(db_alias).get(
        name='time reference')
    ktaggrp_timeref.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('ordd_api', '0013_migrate_schema_to_v9'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
