# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-08-11 12:24
from __future__ import unicode_literals

from django.db import migrations, models


def forwards_country_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Country = apps.get_model("ordd_api", "Country")
    KeyTag = apps.get_model("ordd_api", "KeyTag")
    db_alias = schema_editor.connection.alias
    for country in Country.objects.using(db_alias).all():
        country.thinkhazard_appl_tag.clear()
        for peril in country.thinkhazard_appl.all():
            tag = KeyTag.objects.get(name=peril.name, group__name='hazard')
            country.thinkhazard_appl_tag.add(tag)


def backwards_country_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Country = apps.get_model("ordd_api", "Country")
    KeyPeril = apps.get_model("ordd_api", "KeyPeril")
    db_alias = schema_editor.connection.alias
    for country in Country.objects.using(db_alias).all():
        country.thinkhazard_appl.clear()
        # group_name=='hazard' just to be sure that database is consistent
        for tag in country.thinkhazard_appl_tag.all():
            if tag.group.name != 'hazard':
                raise ValueError('For country %s there is a thinkhazard'
                                 '_appl_tag item pointing to %s (%s)' % (
                                     country.name, tag.name, tag.group.name))
            peril = KeyPeril.objects.get(name=tag.name)
            country.thinkhazard_appl.add(peril)


def forwards_keydataset_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    KeyDataset = apps.get_model("ordd_api", "KeyDataset")
    KeyTag = apps.get_model("ordd_api", "KeyTag")
    db_alias = schema_editor.connection.alias
    for keydataset in KeyDataset.objects.using(db_alias).all():
        keydataset.applicability_tag.clear()
        for applicability in keydataset.applicability.all():
            tag = KeyTag.objects.get(name=applicability.name,
                                     group__name='hazard')
            keydataset.applicability_tag.add(tag)


def backwards_keydataset_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    KeyDataset = apps.get_model("ordd_api", "KeyDataset")
    KeyPeril = apps.get_model("ordd_api", "KeyPeril")
    db_alias = schema_editor.connection.alias
    for keydataset in KeyDataset.objects.using(db_alias).all():
        keydataset.applicability.clear()
        for tag in keydataset.applicability_tag.all():
            if tag.group.name != 'hazard':
                raise ValueError('For country %s there is a thinkhazard'
                                 '_appl_tag item pointing to %s (%s)' % (
                                     keydataset.name,
                                     tag.name, tag.group.name))
            peril = KeyPeril.objects.get(name=tag.name)
            keydataset.applicability.add(peril)


class Migration(migrations.Migration):

    dependencies = [
        ('ordd_api', '0005_keytag_is_peril'),
    ]

    operations = [
        migrations.AddField(
            model_name='country',
            name='thinkhazard_appl_tag',
            field=models.ManyToManyField(to='ordd_api.KeyTag'),
        ),
        migrations.RunPython(forwards_country_func,
                             backwards_country_func),
        migrations.AddField(
            model_name='keydataset',
            name='applicability_tag',
            field=models.ManyToManyField(to='ordd_api.KeyTag'),
        ),
        migrations.RunPython(forwards_keydataset_func,
                             backwards_keydataset_func),
    ]
