# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-08-11 11:50
from __future__ import unicode_literals

import os

from django.db import migrations
import django.conf as conf
import codecs
import json
from ordd_api.management.commands.country_map2018 import country_mapping


def forwards_func(apps, schema_editor):
    database_name = conf.settings.DATABASES['default']['NAME']
    print("\n%s DBNAME [%s]\n" % (
        __file__, database_name))
    # call_command('load_thinkhazard2018', '--datapath',
    # './contents/thinkhazard/cache',
    #              verbosity=0, interactive=False)

    db_alias = schema_editor.connection.alias

    KeyTag = apps.get_model("ordd_api", "KeyTag")
    Country = apps.get_model("ordd_api", "Country")

    datapath = os.path.join('contents', 'thinkhazard', 'cache')

    peril_mapping = {
        "FL": "River flooding",
        "UF": None,
        "CF": "Coastal flooding",
        "EQ": "Earthquake",
        "LS": "Landslide",
        "TS": "Tsunami",
        "VA": "Volcano",
        "CY": "Cyclone",
        "DG": "Water scarcity",
        "EH": None,
        "WF": None
        }

    level_mapping = {
        "HIG": True,
        "MED": True,
        "LOW": False,
        "VLO": False,
        "no-data": False,
        }

    th_data = []

    peril_instances = KeyTag.objects.using(db_alias).filter(
        group__name='hazard').order_by('name')
    peril = {}
    for peril_instance in peril_instances:
        peril[peril_instance.name] = peril_instance

    for filename in os.listdir(datapath):
        if (filename.startswith("adm_division_") and
                filename.endswith(".json")):
            with codecs.open(
                    os.path.join(datapath, filename),
                    'rb', encoding='utf-8') as json_file:
                th_data += json.load(json_file)['data']

    found = 0
    not_found = 0
    for country in Country.objects.using(db_alias).all().order_by('id'):
        country.thinkhazard_appl.clear()

        if country.iso2 == 'AA':
            # special world case
            for peril_instance in peril_instances:
                country.thinkhazard_appl.add(peril_instance)
            continue

        if country.name in country_mapping:
            country_name = country_mapping[country.name]
        else:
            country_name = country.name

        report_cou_name = country.name.replace('*', '_STAR_')

        for th in th_data:
            if 'admin0' not in th:
                continue
            if th['admin0'] == country_name:
                if 'admin1' in th:
                    # print("FOUND BUT WITH admin1, continue")
                    continue
                print("Found: %d) %s: %s" % (
                    country.id, country_name, th['code']))
                found += 1

                report_filename = os.path.join(
                    datapath, 'reports',
                    'report_%s.json' % report_cou_name)

                # here data loading
                with open(report_filename, 'r', encoding='utf-8'
                          ) as report_file:
                    decoded_data = report_file.read()

                appls = json.loads(decoded_data)

                for appl in appls:
                    th_peril = appl['hazardtype']['mnemonic']
                    peril_name = peril_mapping[th_peril]
                    if peril_name is None:
                        continue
                    th_level = appl['hazardlevel']['mnemonic']
                    level = level_mapping[th_level]
                    if not level:
                        continue
                    country.thinkhazard_appl.add(peril[peril_name])
                break
        else:
            print("%d) %s NOT FOUND" % (country.id, country_name))
            not_found += 1

    print("Report: found %d, Not found %d" % (found, not_found))


def backwards_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('ordd_api', '0020_countries2018'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
